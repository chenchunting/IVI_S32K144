/*!
    @page can_pal_s32k144_group CAN PAL
    @brief Demo application showing the CAN PAL functionalities


    ## Application description ##
    _____
    The purpose of this demo application is to show you the usage of the CAN PAL module configured to use Flexible Data Rate from the S32K144 CPU using the S32 SDK API.
     - In the first part, the application will setup the board clocks, pins and other system functions such as SBC if the board uses this module as a CAN transceiver.
     - Then it will configure the CAN PAL module features such as FD, Bitrate and buffers
     - The application will wait for frames to be received on the configured buffer or for an event raised by pressing one of the two buttons which will trigger a frame send to the recipient.
     - Pressing SW3 button of board 1 shall trigger a CAN transfer that results in toggling the RED led on board 2.
     - Pressing SW2 button of board 1 shall trigger a CAN transfer that results in toggling the GREEN led on board 2.
     - This demo application requires two boards, one configured as master and the other one configured as slave (see MASTER/SLAVE defines in application code).


    ## Prerequisites ##
    _____
    To run the example you will need to have the following items:
    - 1 S32K144 board
    - 1 Power Adapter 12V
    - 3 Dupont female to female cable
    - 1 Personal Computer
    - 1 Jlink Lite Debugger (optional, users can use Open SDA)

    ## Boards supported ##
    _____
    The following boards are supported by this application:
    - S32K144EVB-Q100
    - S32K144-MB

    ## Hardware Wiring ##
    _____
    The following connections must be done to for this example application to work:

    PIN FUNCTION         |   S32K144EVB-Q100               |   S32K144-MB
    ---------------------|---------------------------------|--------------
    CAN HIGH (\b *)      |  CAN HIGH - J13.1               |   CAN HIGH - J60.2
    CAN LOW (\b *)       |  CAN LOW - J13.2                |   CAN LOW - J60.3
    GND (\b GND)         |  GND - J13.4                    |   GND - J6
    BUTTON 1 (\b PTC13)  |  SW3 - wired on the board       |   BTN2 - wired on the board
    BUTTON 2 (\b PTC12)  |  SW2  - wired on the board      |   BTN3 - wired on the board
    RED_LED (\b PTD15)   |  RGB_RED - wired on the board   |   LED3 - wired on the board
    GREEN_LED (\b PTD16) |  RGB_GREEN - wired on the board |   LED2 - wired on the board

    <b>(*) Those lines must be modulated using a transceiver, if it is not specified the boards already include the CAN transceiver</b>

    ## How to run ##
    _____
    #### 1. Importing the project into the workspace ####
    After opening S32 Design Studio, go to \b File -> \b New \b S32DS \b Project \b From... and select \b can_pal_s32k144. Then click on \b Finish. \n
    The project should now be copied into you current workspace.
    #### 2. Generating the Processor Expert configuration ####
    First go to \b Project \b Explorer View in S32 DS and select the current project(\b can_pal_s32k144). Then go to \b Project and click on \b Generate \b Processor \b Expert \b Code \n
    Wait for the code generation to be completed before continuing to the next step.
    #### 3. Building the project ####
    Select the configuration to be built \b FLASH (Debug_FLASH) or \b RAM (Debug_RAM) by left clicking on the downward arrow corresponding to the \b build button(@image hammer.png).
    Wait for the build action to be completed before continuing to the next step.
    #### 4. Running the project ####
    Go to \b Run and select \b Debug \b Configurations. There will be four debug configurations for this project:
     Configuration Name | Description
     -------------------|------------
     \b can_pal_s32k144 \b Debug_RAM \b Jlink | Debug the RAM configuration using Segger Jlink debuggers
     \b can_pal_s32k144 \b Debug_FLASH \b Jlink | Debug the FLASH configuration using Segger Jlink debuggers
     \b can_pal_s32k144 \b Debug_RAM \b PEMicro | Debug the RAM configuration using PEMicro debuggers
     \b can_pal_s32k144 \b Debug_FLASH \b PEMicro | Debug the FLASH configuration using PEMicro debuggers
    \n Select the desired debug configuration and click on \b Launch. Now the perspective will change to the \b Debug \b Perspective. \n
    Use the controls to control the program flow.

    @note For more detailed information related to S32 Design Studio usage please consult the available documentation.


*/

